name: Continuous Integration

# Only run CI on Pull Requests
on: pull_request

jobs:

  lint:
    name: Python Linting
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.6']

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Dependencies
        run: python -m pip install black flake8

      - name: Check Python formatting with Black
        run: black --line-length 100 --target-version py36 --check --diff .

      - name: Verify Python files using Flake8
        run: flake8 --max-line-length=100 --count --statistics --exit-zero .

  build:      
    name: Verify Dockerfiles
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v2
      - name: Build Dockerfile
        run: docker build .

  python-tests:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.6']  # TODO(Python3): Include 3.7, 3.8
    
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install `gpg` package dpeendencies
        run: sudo apt-get -y install python3-gpg libgpgme-dev swig

      - name: Install ldap package dependencies
        run: |
          sudo apt-get install -y libsasl2-dev python-dev libldap2-dev libssl-dev

      - name: Cache Python Dependencies
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-tests.txt') }} 
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install Python Dependencies
        run: python -m pip install -r requirements.txt

      - name: Install Python Test Dependencies
        run: python -m pip install -r requirements-tests.txt

      - name: Unit Tests (SQLite)
        env:
          TEST: "true"
        run: |
          alembic upgrade head
          py.test --timeout=3600 --verbose .


